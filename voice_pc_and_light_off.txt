
# MAILGUN_API_KEY = 'This is the private API key which you can find on your Mailgun Dashboard' 
# SANDBOX_URL= 'You can find this on your Mailgun Dashboard' 
# SENDER_EMAIL = 'test@' + SANDBOX_URL  # No need to modify this. The sandbox URL is of the format test@YOUR_SANDBOX_URL
# RECIPIENT_EMAIL = 'Enter your Email ID Here'
# API_KEY = 'This is your Bolt Cloud account API key'
# DEVICE_ID = 'This is the ID of your Bolt device' 
#THESE DETAILS WILL BE IN email_confg.py and save to import

import email_conf, json, time #importing necessary modules
from boltiot import Email, Bolt
minimum_limit = 300 
maximum_limit = 600 #specifying minimum and maximum limit
mybolt = Bolt(email_conf.API_KEY, email_conf.DEVICE_ID) # fetch api key of bolt device
mailer = Email(email_conf.MAILGUN_API_KEY, email_conf.SANDBOX_URL, email_conf.SENDER_EMAIL, email_conf.RECIPIENT_EMAIL) 
# fetch api key of mailgun sender, reciever email

while True: 
    print ("Reading sensor value")
    response = mybolt.analogRead('A0')  #get reponse from pin A0
    data = json.loads(response) #load data in Json format
    print ("Sensor value is: " + str(data['value'])) #print thte sensor valuse
    try: 
        sensor_value = int(data['value']) 
        if sensor_value > maximum_limit or sensor_value < minimum_limit: # check if temperature in range or not
            print("Making request to Mailgun to send an email") 
            response = mailer.send_email("Alert", "The Current temperature sensor value is " +str(sensor_value)) #send mail telling the temperature
            response_text = json.loads(response.text) # load response from mailgun
            print("Response received from Mailgun is: " + str(response_text['message']))
    except Exception as e: 
        print ("Error occured: Below are the details") #report the user if there is any error
        print (e)
    time.sleep(10) # wait for 10 seconds
